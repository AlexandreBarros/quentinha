// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

namespace Repository.Migrations
{
    [DbContext(typeof(OceanicaContext))]
    [Migration("20180809202450_geolocation")]
    partial class geolocation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuentinhaCarioca.Root.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddOn")
                        .HasMaxLength(10);

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("DetachmentDate")
                        .HasColumnType("DateTime");

                    b.Property<Guid?>("IndividualUserId");

                    b.Property<Guid?>("LegalUserId");

                    b.Property<string>("NeighborHood")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Number")
                        .HasMaxLength(10);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.Property<string>("latitude")
                        .HasMaxLength(100);

                    b.Property<string>("longitude")
                        .HasMaxLength(100);

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("IndividualUserId");

                    b.HasIndex("LegalUserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cnpj")
                        .HasMaxLength(25);

                    b.Property<string>("Code")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Site")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.BankAccount", b =>
                {
                    b.Property<Guid>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("BankId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("DetachmentDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("Digit")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("Holder")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("LegalUserId");

                    b.HasKey("BankAccountId");

                    b.HasIndex("BankId");

                    b.HasIndex("LegalUserId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("DetachmentDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime?>("DetachmentDate");

                    b.Property<Guid?>("LegalUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("ParentCategoryId");

                    b.Property<string>("UrlCarteLogo");

                    b.HasKey("CategoryId");

                    b.HasIndex("LegalUserId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.CategoryItem", b =>
                {
                    b.Property<Guid>("CategoryId");

                    b.Property<Guid>("ItemId");

                    b.HasKey("CategoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CategoryItem");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("StateId");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(20);

                    b.Property<string>("ContactName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("DetachmentDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<Guid?>("IndividualUserId");

                    b.Property<Guid?>("LegalUserId");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.HasKey("ContactId");

                    b.HasIndex("IndividualUserId");

                    b.HasIndex("LegalUserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserIndividualUserId");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserIndividualUserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active");

                    b.Property<Guid?>("LegalUserId");

                    b.Property<Guid?>("UserIndividualUserId");

                    b.HasKey("EmployeeId");

                    b.HasIndex("LegalUserId");

                    b.HasIndex("UserIndividualUserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.IndividualUser", b =>
                {
                    b.Property<Guid>("IndividualUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("DetachmentDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("IndividualUserId");

                    b.ToTable("IndividualUser");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Photo");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("PricePromo")
                        .HasColumnType("decimal(9,6)");

                    b.HasKey("ItemId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.LegalUser", b =>
                {
                    b.Property<Guid>("LegalUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("DetachmentDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("ExhibitionName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("InscEst")
                        .HasMaxLength(30);

                    b.Property<string>("InscMun")
                        .HasMaxLength(30);

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("NormalizedExhibitionName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("NormalizedLegalName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("UrlData")
                        .IsRequired();

                    b.HasKey("LegalUserId");

                    b.ToTable("LegalUser");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.LegalUserRestaurantClasses", b =>
                {
                    b.Property<Guid>("LegalUserRestaurantClassesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassRestaurantClassesId");

                    b.Property<Guid?>("LegalUserId");

                    b.HasKey("LegalUserRestaurantClassesId");

                    b.HasIndex("ClassRestaurantClassesId");

                    b.HasIndex("LegalUserId");

                    b.ToTable("LegalUserRestaurantClasses");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.LegalUserReview", b =>
                {
                    b.Property<Guid>("LegalUserReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(140);

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetDate()");

                    b.Property<double>("Review");

                    b.Property<Guid?>("ShopLegalUserId");

                    b.Property<Guid?>("UserIndividualUserId");

                    b.HasKey("LegalUserReviewId");

                    b.HasIndex("ShopLegalUserId");

                    b.HasIndex("UserIndividualUserId");

                    b.ToTable("LegalUserReview");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.LegalUserSettings", b =>
                {
                    b.Property<Guid>("LegalUserSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DeliveryCoust")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("FridayEndHour")
                        .HasMaxLength(5);

                    b.Property<bool>("FridayIsWorkDay");

                    b.Property<string>("FridayStartHour")
                        .HasMaxLength(5);

                    b.Property<bool>("IsOpen");

                    b.Property<Guid?>("LegalUserId");

                    b.Property<string>("MondayEndHour")
                        .HasMaxLength(5);

                    b.Property<bool>("MondayIsWorkDay");

                    b.Property<string>("MondayStartHour")
                        .HasMaxLength(5);

                    b.Property<string>("SaturdayEndHour")
                        .HasMaxLength(5);

                    b.Property<bool>("SaturdayIsWorkDay");

                    b.Property<string>("SaturdayStartHour")
                        .HasMaxLength(5);

                    b.Property<string>("SundayEndHour")
                        .HasMaxLength(5);

                    b.Property<bool>("SundayIsWorkDay");

                    b.Property<string>("SundayStartHour")
                        .HasMaxLength(5);

                    b.Property<string>("ThursdayEndHour")
                        .HasMaxLength(5);

                    b.Property<bool>("ThursdayIsWorkDay");

                    b.Property<string>("ThursdayStartHour")
                        .HasMaxLength(5);

                    b.Property<string>("TuesdayEndHour")
                        .HasMaxLength(5);

                    b.Property<bool>("TuesdayIsWorkDay");

                    b.Property<string>("TuesdayStartHour")
                        .HasMaxLength(5);

                    b.Property<string>("WednesdayEndHour")
                        .HasMaxLength(5);

                    b.Property<bool>("WednesdayIsWorkDay");

                    b.Property<string>("WednesdayStartHour")
                        .HasMaxLength(5);

                    b.HasKey("LegalUserSettingsId");

                    b.HasIndex("LegalUserId");

                    b.ToTable("LegalUserSettings");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DateTime");

                    b.Property<Guid?>("CustomerIndividualUserId");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("DateTime");

                    b.Property<Guid?>("EmployeeId");

                    b.Property<Guid?>("LegalUserId");

                    b.Property<Guid?>("StatusOrderStatusId");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerIndividualUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LegalUserId");

                    b.HasIndex("StatusOrderStatusId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.OrderStatus", b =>
                {
                    b.Property<Guid>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EnumIdentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Promo", b =>
                {
                    b.Property<Guid>("PromoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime?>("DetachmentDate");

                    b.Property<string>("FirstLayerFrase")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<Guid?>("LegalUserId");

                    b.Property<string>("SecondLayerFrase")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ThirdLayerFrase")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("PromoId");

                    b.HasIndex("LegalUserId");

                    b.ToTable("Promo");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.RestaurantClasses", b =>
                {
                    b.Property<Guid>("RestaurantClassesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("RestaurantClassesId");

                    b.ToTable("RestaurantClasses");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime?>("DetachmentDate");

                    b.Property<Guid?>("RoleId");

                    b.Property<Guid?>("UserIndividualUserId");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserIndividualUserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Address", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("QuentinhaCarioca.Root.IndividualUser")
                        .WithMany("Addresses")
                        .HasForeignKey("IndividualUserId");

                    b.HasOne("QuentinhaCarioca.Root.LegalUser")
                        .WithMany("Addresses")
                        .HasForeignKey("LegalUserId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.BankAccount", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId");

                    b.HasOne("QuentinhaCarioca.Root.LegalUser", "LegalUser")
                        .WithMany()
                        .HasForeignKey("LegalUserId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Category", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.LegalUser", "LegalUser")
                        .WithMany()
                        .HasForeignKey("LegalUserId");

                    b.HasOne("QuentinhaCarioca.Root.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.CategoryItem", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.Category", "Category")
                        .WithMany("CategoriesItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuentinhaCarioca.Root.Item", "Item")
                        .WithMany("CategoriesItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Contact", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.IndividualUser")
                        .WithMany("Contacts")
                        .HasForeignKey("IndividualUserId");

                    b.HasOne("QuentinhaCarioca.Root.LegalUser")
                        .WithMany("Contacts")
                        .HasForeignKey("LegalUserId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Customer", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.IndividualUser", "User")
                        .WithMany()
                        .HasForeignKey("UserIndividualUserId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Employee", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.LegalUser", "LegalUser")
                        .WithMany()
                        .HasForeignKey("LegalUserId");

                    b.HasOne("QuentinhaCarioca.Root.IndividualUser", "User")
                        .WithMany()
                        .HasForeignKey("UserIndividualUserId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.LegalUserRestaurantClasses", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.RestaurantClasses", "Class")
                        .WithMany()
                        .HasForeignKey("ClassRestaurantClassesId");

                    b.HasOne("QuentinhaCarioca.Root.LegalUser", "LegalUser")
                        .WithMany()
                        .HasForeignKey("LegalUserId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.LegalUserReview", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.LegalUser", "Shop")
                        .WithMany("Reviews")
                        .HasForeignKey("ShopLegalUserId");

                    b.HasOne("QuentinhaCarioca.Root.IndividualUser", "User")
                        .WithMany()
                        .HasForeignKey("UserIndividualUserId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.LegalUserSettings", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.LegalUser", "LegalUser")
                        .WithMany()
                        .HasForeignKey("LegalUserId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Order", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.IndividualUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerIndividualUserId");

                    b.HasOne("QuentinhaCarioca.Root.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("QuentinhaCarioca.Root.LegalUser", "LegalUser")
                        .WithMany()
                        .HasForeignKey("LegalUserId");

                    b.HasOne("QuentinhaCarioca.Root.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusOrderStatusId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.Promo", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.LegalUser", "Legal")
                        .WithMany()
                        .HasForeignKey("LegalUserId");
                });

            modelBuilder.Entity("QuentinhaCarioca.Root.UserRole", b =>
                {
                    b.HasOne("QuentinhaCarioca.Root.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("QuentinhaCarioca.Root.IndividualUser", "User")
                        .WithMany()
                        .HasForeignKey("UserIndividualUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
